name: Build and Upload AAB
on:
  push:
    branches: [ main ]  # Trigger the workflow on push events to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the environment to run the job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Check out the repository code

      - name: Set up JDK 17
        uses: actions/setup-java@v4  # Set up Java Development Kit (JDK) version 11
        with:
          distribution: 'temurin'
          java-version: 17  # Specify the JDK version to use
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew  # Make the Gradle wrapper script executable

      - name: Grant execute permission for increment_version script
        run: chmod +x increment_version.sh  # Ensure the version increment script is executable

      - name: Increment version code and name
        run: ./increment_version.sh  # Call the script to update versionCode and versionName

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE_64 }}" | base64 --decode > app/keystore.jks
        # Decode the base64 encoded keystore file and save it to app/keystore.jks
        
      - name: Verify Keystore File
        run: ls -l app/keystore.jks
        
      - name: Create missing schema directory
        run: mkdir -p core/model/schemas
        
      - name: Print Working Directory
        run: pwd

      - name: Build release AAB with signing
        run: |
            ./gradlew bundleRelease \
            -Pandroid.injected.signing.store.file=$(pwd)/app/keystore.jks \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }}

        # Build the Android App Bundle (AAB) for release, using the specified signing configurations

      - name: Decode Service Account JSON
        run: echo "${{ secrets.APP_SERVICE_ACCOUNT_JSON }}" | base64 --decode > service-account-key.json
        # Decode the base64 encoded service account JSON file for Google Play API access
        
      - name: Verify Service Account File
        run: ls -l service-account-key.json

      - name: Upload AAB to Google Play Store
        uses: r0adkll/upload-google-play@v1.0.0  # Use action to upload AAB to Google Play Store
        with:
            service_account_json: $(pwd)/service-account-key.json  # Provide service account JSON for authentication
            package_name: "com.gitsoft.thoughtpad"  # Specify the package name of your application
            aab_file_path: "./app/release/app-release.aab"  # Path to the generated AAB file
            track: "production"  # Specify the release track (internal, alpha, beta, production)
            release_status: "draft"  # Set release status to draft or completed based on your needs
